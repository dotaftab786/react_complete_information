{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ListActionTypes } from './listActions.types';\n/**\r\n * Looks up the next valid item to highlight within the list.\r\n *\r\n * @param currentIndex The index of the start of the search.\r\n * @param lookupDirection Whether to look for the next or previous item.\r\n * @param items The array of items to search.\r\n * @param includeDisabledItems Whether to include disabled items in the search.\r\n * @param isItemDisabled A function that determines whether an item is disabled.\r\n * @param wrapAround Whether to wrap around the list when searching.\r\n * @returns The index of the next valid item to highlight or -1 if no valid item is found.\r\n */\n\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\n    return -1;\n  }\n\n  let nextFocus = currentIndex;\n\n  for (;;) {\n    // No valid items found\n    if (!wrapAround && lookupDirection === 'next' && nextFocus === items.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {\n      return -1;\n    }\n\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\n\n    if (nextFocusDisabled) {\n      nextFocus += lookupDirection === 'next' ? 1 : -1;\n\n      if (wrapAround) {\n        nextFocus = (nextFocus + items.length) % items.length;\n      }\n    } else {\n      return nextFocus;\n    }\n  }\n}\n/**\r\n * Gets the next item to highlight based on the current highlighted item and the search direction.\r\n *\r\n * @param previouslyHighlightedValue The item from which to start the search for the next candidate.\r\n * @param offset The offset from the previously highlighted item to search for the next candidate or a special named value ('reset', 'start', 'end').\r\n * @param context The list action context.\r\n *\r\n * @returns The next item to highlight or null if no item is valid.\r\n */\n\n\nexport function moveHighlight(previouslyHighlightedValue, offset, context) {\n  var _items$nextIndex;\n\n  const {\n    items,\n    isItemDisabled,\n    disableListWrap,\n    disabledItemsFocusable,\n    itemComparer,\n    focusManagement\n  } = context; // TODO: make this configurable\n  // The always should be an item highlighted when focus is managed by the DOM\n  // so that it's accessible by the `tab` key.\n\n  const defaultHighlightedIndex = focusManagement === 'DOM' ? 0 : -1;\n  const maxIndex = items.length - 1;\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex(item => itemComparer(item, previouslyHighlightedValue));\n  let nextIndexCandidate;\n  let lookupDirection;\n  let wrapAround = !disableListWrap;\n\n  switch (offset) {\n    case 'reset':\n      if (defaultHighlightedIndex === -1) {\n        return null;\n      }\n\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n\n    case 'start':\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n\n    case 'end':\n      nextIndexCandidate = maxIndex;\n      lookupDirection = 'previous';\n      wrapAround = false;\n      break;\n\n    default:\n      {\n        const newIndex = previouslyHighlightedIndex + offset;\n\n        if (newIndex < 0) {\n          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset) > 1) {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          } else {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          }\n        } else if (newIndex > maxIndex) {\n          if (!wrapAround || Math.abs(offset) > 1) {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          } else {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          }\n        } else {\n          nextIndexCandidate = newIndex;\n          lookupDirection = offset >= 0 ? 'next' : 'previous';\n        }\n      }\n  }\n\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround); // If there are no valid items to highlight, return the previously highlighted item (if it's still valid).\n\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\n    return previouslyHighlightedValue;\n  }\n\n  return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;\n}\n/**\r\n * Toggles the selection of an item.\r\n *\r\n * @param item Item to toggle.\r\n * @param selectedValues Already selected items.\r\n * @param selectionMode The number of items that can be simultanously selected.\r\n * @param itemComparer A custom item comparer function.\r\n *\r\n * @returns The new array of selected items.\r\n */\n\nexport function toggleSelection(item, selectedValues, selectionMode, itemComparer) {\n  if (selectionMode === 'none') {\n    return [];\n  }\n\n  if (selectionMode === 'single') {\n    // if the item to select has already been selected, return the original array\n    if (itemComparer(selectedValues[0], item)) {\n      return selectedValues;\n    }\n\n    return [item];\n  } // The toggled item is selected; remove it from the selection.\n\n\n  if (selectedValues.some(sv => itemComparer(sv, item))) {\n    return selectedValues.filter(sv => !itemComparer(sv, item));\n  } // The toggled item is not selected - add it to the selection.\n\n\n  return [...selectedValues, item];\n}\n\nfunction handleItemSelection(item, state, context) {\n  const {\n    itemComparer,\n    isItemDisabled,\n    selectionMode,\n    items\n  } = context;\n  const {\n    selectedValues\n  } = state;\n  const itemIndex = items.findIndex(i => itemComparer(item, i));\n\n  if (isItemDisabled(item, itemIndex)) {\n    return state;\n  } // if the item is already selected, remove it from the selection, otherwise add it\n\n\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\n  return _extends({}, state, {\n    selectedValues: newSelectedValues,\n    highlightedValue: item\n  });\n}\n\nfunction handleKeyDown(key, state, context) {\n  const previouslySelectedValue = state.highlightedValue;\n  const {\n    orientation,\n    pageSize\n  } = context;\n\n  switch (key) {\n    case 'Home':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'start', context)\n      });\n\n    case 'End':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 'end', context)\n      });\n\n    case 'PageUp':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, context)\n      });\n\n    case 'PageDown':\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize, context)\n      });\n\n    case 'ArrowUp':\n      if (orientation !== 'vertical') {\n        break;\n      }\n\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\n      });\n\n    case 'ArrowDown':\n      if (orientation !== 'vertical') {\n        break;\n      }\n\n      return _extends({}, state, {\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\n      });\n\n    case 'ArrowLeft':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n\n        const offset = orientation === 'horizontal-ltr' ? -1 : 1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n\n    case 'ArrowRight':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n\n        const offset = orientation === 'horizontal-ltr' ? 1 : -1;\n        return _extends({}, state, {\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        });\n      }\n\n    case 'Enter':\n    case ' ':\n      if (state.highlightedValue === null) {\n        return state;\n      }\n\n      return handleItemSelection(state.highlightedValue, state, context);\n\n    default:\n      break;\n  }\n\n  return state;\n}\n\nfunction handleBlur(state, context) {\n  if (context.focusManagement === 'DOM') {\n    return state;\n  }\n\n  return _extends({}, state, {\n    highlightedValue: null\n  });\n}\n\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\n  var _stringifyItem;\n\n  const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();\n\n  if (!text || text.length === 0) {\n    // Make item not navigable if stringification fails or results in empty string.\n    return false;\n  }\n\n  return text.indexOf(searchString) === 0;\n}\n\nfunction handleTextNavigation(state, searchString, context) {\n  const {\n    items,\n    isItemDisabled,\n    disabledItemsFocusable,\n    getItemAsString\n  } = context;\n  const startWithCurrentItem = searchString.length > 1;\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\n\n  for (let index = 0; index < items.length; index += 1) {\n    // Return un-mutated state if looped back to the currently highlighted value\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\n      return state;\n    }\n\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\n      // The nextItem is the element to be highlighted\n      return _extends({}, state, {\n        highlightedValue: nextItem\n      });\n    } // Move to the next element.\n\n\n    nextItem = moveHighlight(nextItem, 1, context);\n  } // No item matches the text search criteria\n\n\n  return state;\n}\n\nfunction handleItemsChange(items, previousItems, state, context) {\n  var _state$selectedValues;\n\n  const {\n    itemComparer,\n    focusManagement\n  } = context;\n  let newHighlightedValue = null;\n\n  if (state.highlightedValue != null) {\n    var _items$find;\n\n    newHighlightedValue = (_items$find = items.find(item => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;\n  } else if (focusManagement === 'DOM' && previousItems.length === 0) {\n    newHighlightedValue = moveHighlight(null, 'reset', context);\n  } // exclude selected values that are no longer in the items list\n\n\n  const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];\n  const newSelectedValues = selectedValues.filter(selectedValue => items.some(item => itemComparer(item, selectedValue)));\n  return _extends({}, state, {\n    highlightedValue: newHighlightedValue,\n    selectedValues: newSelectedValues\n  });\n}\n\nexport default function listReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n\n  switch (type) {\n    case ListActionTypes.keyDown:\n      return handleKeyDown(action.key, state, context);\n\n    case ListActionTypes.itemClick:\n      return handleItemSelection(action.item, state, context);\n\n    case ListActionTypes.blur:\n      return handleBlur(state, context);\n\n    case ListActionTypes.textNavigation:\n      return handleTextNavigation(state, action.searchString, context);\n\n    case ListActionTypes.itemsChange:\n      return handleItemsChange(action.items, action.previousItems, state, context);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["_extends","ListActionTypes","findValidItemToHighlight","currentIndex","lookupDirection","items","includeDisabledItems","isItemDisabled","wrapAround","length","every","item","itemIndex","nextFocus","nextFocusDisabled","moveHighlight","previouslyHighlightedValue","offset","context","_items$nextIndex","disableListWrap","disabledItemsFocusable","itemComparer","focusManagement","defaultHighlightedIndex","maxIndex","previouslyHighlightedIndex","findIndex","nextIndexCandidate","newIndex","Math","abs","nextIndex","toggleSelection","selectedValues","selectionMode","some","sv","filter","handleItemSelection","state","i","newSelectedValues","highlightedValue","handleKeyDown","key","previouslySelectedValue","orientation","pageSize","handleBlur","textCriteriaMatches","searchString","stringifyItem","_stringifyItem","text","trim","toLowerCase","indexOf","handleTextNavigation","getItemAsString","startWithCurrentItem","nextItem","index","handleItemsChange","previousItems","_state$selectedValues","newHighlightedValue","_items$find","find","selectedValue","listReducer","action","type","keyDown","itemClick","blur","textNavigation","itemsChange"],"sources":["C:/Users/Admin/Desktop/react_complete_information/react-redux/node_modules/@mui/base/useList/listReducer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport { ListActionTypes } from './listActions.types';\r\n/**\r\n * Looks up the next valid item to highlight within the list.\r\n *\r\n * @param currentIndex The index of the start of the search.\r\n * @param lookupDirection Whether to look for the next or previous item.\r\n * @param items The array of items to search.\r\n * @param includeDisabledItems Whether to include disabled items in the search.\r\n * @param isItemDisabled A function that determines whether an item is disabled.\r\n * @param wrapAround Whether to wrap around the list when searching.\r\n * @returns The index of the next valid item to highlight or -1 if no valid item is found.\r\n */\r\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\r\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\r\n    return -1;\r\n  }\r\n  let nextFocus = currentIndex;\r\n  for (;;) {\r\n    // No valid items found\r\n    if (!wrapAround && lookupDirection === 'next' && nextFocus === items.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {\r\n      return -1;\r\n    }\r\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\r\n    if (nextFocusDisabled) {\r\n      nextFocus += lookupDirection === 'next' ? 1 : -1;\r\n      if (wrapAround) {\r\n        nextFocus = (nextFocus + items.length) % items.length;\r\n      }\r\n    } else {\r\n      return nextFocus;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the next item to highlight based on the current highlighted item and the search direction.\r\n *\r\n * @param previouslyHighlightedValue The item from which to start the search for the next candidate.\r\n * @param offset The offset from the previously highlighted item to search for the next candidate or a special named value ('reset', 'start', 'end').\r\n * @param context The list action context.\r\n *\r\n * @returns The next item to highlight or null if no item is valid.\r\n */\r\nexport function moveHighlight(previouslyHighlightedValue, offset, context) {\r\n  var _items$nextIndex;\r\n  const {\r\n    items,\r\n    isItemDisabled,\r\n    disableListWrap,\r\n    disabledItemsFocusable,\r\n    itemComparer,\r\n    focusManagement\r\n  } = context;\r\n\r\n  // TODO: make this configurable\r\n  // The always should be an item highlighted when focus is managed by the DOM\r\n  // so that it's accessible by the `tab` key.\r\n  const defaultHighlightedIndex = focusManagement === 'DOM' ? 0 : -1;\r\n  const maxIndex = items.length - 1;\r\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex(item => itemComparer(item, previouslyHighlightedValue));\r\n  let nextIndexCandidate;\r\n  let lookupDirection;\r\n  let wrapAround = !disableListWrap;\r\n  switch (offset) {\r\n    case 'reset':\r\n      if (defaultHighlightedIndex === -1) {\r\n        return null;\r\n      }\r\n      nextIndexCandidate = 0;\r\n      lookupDirection = 'next';\r\n      wrapAround = false;\r\n      break;\r\n    case 'start':\r\n      nextIndexCandidate = 0;\r\n      lookupDirection = 'next';\r\n      wrapAround = false;\r\n      break;\r\n    case 'end':\r\n      nextIndexCandidate = maxIndex;\r\n      lookupDirection = 'previous';\r\n      wrapAround = false;\r\n      break;\r\n    default:\r\n      {\r\n        const newIndex = previouslyHighlightedIndex + offset;\r\n        if (newIndex < 0) {\r\n          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset) > 1) {\r\n            nextIndexCandidate = 0;\r\n            lookupDirection = 'next';\r\n          } else {\r\n            nextIndexCandidate = maxIndex;\r\n            lookupDirection = 'previous';\r\n          }\r\n        } else if (newIndex > maxIndex) {\r\n          if (!wrapAround || Math.abs(offset) > 1) {\r\n            nextIndexCandidate = maxIndex;\r\n            lookupDirection = 'previous';\r\n          } else {\r\n            nextIndexCandidate = 0;\r\n            lookupDirection = 'next';\r\n          }\r\n        } else {\r\n          nextIndexCandidate = newIndex;\r\n          lookupDirection = offset >= 0 ? 'next' : 'previous';\r\n        }\r\n      }\r\n  }\r\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);\r\n\r\n  // If there are no valid items to highlight, return the previously highlighted item (if it's still valid).\r\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\r\n    return previouslyHighlightedValue;\r\n  }\r\n  return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;\r\n}\r\n\r\n/**\r\n * Toggles the selection of an item.\r\n *\r\n * @param item Item to toggle.\r\n * @param selectedValues Already selected items.\r\n * @param selectionMode The number of items that can be simultanously selected.\r\n * @param itemComparer A custom item comparer function.\r\n *\r\n * @returns The new array of selected items.\r\n */\r\nexport function toggleSelection(item, selectedValues, selectionMode, itemComparer) {\r\n  if (selectionMode === 'none') {\r\n    return [];\r\n  }\r\n  if (selectionMode === 'single') {\r\n    // if the item to select has already been selected, return the original array\r\n    if (itemComparer(selectedValues[0], item)) {\r\n      return selectedValues;\r\n    }\r\n    return [item];\r\n  }\r\n\r\n  // The toggled item is selected; remove it from the selection.\r\n  if (selectedValues.some(sv => itemComparer(sv, item))) {\r\n    return selectedValues.filter(sv => !itemComparer(sv, item));\r\n  }\r\n\r\n  // The toggled item is not selected - add it to the selection.\r\n  return [...selectedValues, item];\r\n}\r\nfunction handleItemSelection(item, state, context) {\r\n  const {\r\n    itemComparer,\r\n    isItemDisabled,\r\n    selectionMode,\r\n    items\r\n  } = context;\r\n  const {\r\n    selectedValues\r\n  } = state;\r\n  const itemIndex = items.findIndex(i => itemComparer(item, i));\r\n  if (isItemDisabled(item, itemIndex)) {\r\n    return state;\r\n  }\r\n\r\n  // if the item is already selected, remove it from the selection, otherwise add it\r\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\r\n  return _extends({}, state, {\r\n    selectedValues: newSelectedValues,\r\n    highlightedValue: item\r\n  });\r\n}\r\nfunction handleKeyDown(key, state, context) {\r\n  const previouslySelectedValue = state.highlightedValue;\r\n  const {\r\n    orientation,\r\n    pageSize\r\n  } = context;\r\n  switch (key) {\r\n    case 'Home':\r\n      return _extends({}, state, {\r\n        highlightedValue: moveHighlight(previouslySelectedValue, 'start', context)\r\n      });\r\n    case 'End':\r\n      return _extends({}, state, {\r\n        highlightedValue: moveHighlight(previouslySelectedValue, 'end', context)\r\n      });\r\n    case 'PageUp':\r\n      return _extends({}, state, {\r\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, context)\r\n      });\r\n    case 'PageDown':\r\n      return _extends({}, state, {\r\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize, context)\r\n      });\r\n    case 'ArrowUp':\r\n      if (orientation !== 'vertical') {\r\n        break;\r\n      }\r\n      return _extends({}, state, {\r\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\r\n      });\r\n    case 'ArrowDown':\r\n      if (orientation !== 'vertical') {\r\n        break;\r\n      }\r\n      return _extends({}, state, {\r\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\r\n      });\r\n    case 'ArrowLeft':\r\n      {\r\n        if (orientation === 'vertical') {\r\n          break;\r\n        }\r\n        const offset = orientation === 'horizontal-ltr' ? -1 : 1;\r\n        return _extends({}, state, {\r\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\r\n        });\r\n      }\r\n    case 'ArrowRight':\r\n      {\r\n        if (orientation === 'vertical') {\r\n          break;\r\n        }\r\n        const offset = orientation === 'horizontal-ltr' ? 1 : -1;\r\n        return _extends({}, state, {\r\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\r\n        });\r\n      }\r\n    case 'Enter':\r\n    case ' ':\r\n      if (state.highlightedValue === null) {\r\n        return state;\r\n      }\r\n      return handleItemSelection(state.highlightedValue, state, context);\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n}\r\nfunction handleBlur(state, context) {\r\n  if (context.focusManagement === 'DOM') {\r\n    return state;\r\n  }\r\n  return _extends({}, state, {\r\n    highlightedValue: null\r\n  });\r\n}\r\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\r\n  var _stringifyItem;\r\n  const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();\r\n  if (!text || text.length === 0) {\r\n    // Make item not navigable if stringification fails or results in empty string.\r\n    return false;\r\n  }\r\n  return text.indexOf(searchString) === 0;\r\n}\r\nfunction handleTextNavigation(state, searchString, context) {\r\n  const {\r\n    items,\r\n    isItemDisabled,\r\n    disabledItemsFocusable,\r\n    getItemAsString\r\n  } = context;\r\n  const startWithCurrentItem = searchString.length > 1;\r\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\r\n  for (let index = 0; index < items.length; index += 1) {\r\n    // Return un-mutated state if looped back to the currently highlighted value\r\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\r\n      return state;\r\n    }\r\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\r\n      // The nextItem is the element to be highlighted\r\n      return _extends({}, state, {\r\n        highlightedValue: nextItem\r\n      });\r\n    }\r\n    // Move to the next element.\r\n    nextItem = moveHighlight(nextItem, 1, context);\r\n  }\r\n\r\n  // No item matches the text search criteria\r\n  return state;\r\n}\r\nfunction handleItemsChange(items, previousItems, state, context) {\r\n  var _state$selectedValues;\r\n  const {\r\n    itemComparer,\r\n    focusManagement\r\n  } = context;\r\n  let newHighlightedValue = null;\r\n  if (state.highlightedValue != null) {\r\n    var _items$find;\r\n    newHighlightedValue = (_items$find = items.find(item => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;\r\n  } else if (focusManagement === 'DOM' && previousItems.length === 0) {\r\n    newHighlightedValue = moveHighlight(null, 'reset', context);\r\n  }\r\n\r\n  // exclude selected values that are no longer in the items list\r\n  const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];\r\n  const newSelectedValues = selectedValues.filter(selectedValue => items.some(item => itemComparer(item, selectedValue)));\r\n  return _extends({}, state, {\r\n    highlightedValue: newHighlightedValue,\r\n    selectedValues: newSelectedValues\r\n  });\r\n}\r\nexport default function listReducer(state, action) {\r\n  const {\r\n    type,\r\n    context\r\n  } = action;\r\n  switch (type) {\r\n    case ListActionTypes.keyDown:\r\n      return handleKeyDown(action.key, state, context);\r\n    case ListActionTypes.itemClick:\r\n      return handleItemSelection(action.item, state, context);\r\n    case ListActionTypes.blur:\r\n      return handleBlur(state, context);\r\n    case ListActionTypes.textNavigation:\r\n      return handleTextNavigation(state, action.searchString, context);\r\n    case ListActionTypes.itemsChange:\r\n      return handleItemsChange(action.items, action.previousItems, state, context);\r\n    default:\r\n      return state;\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}