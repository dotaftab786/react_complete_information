{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref2) {\n    let {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = _ref2;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n\n    const _ref = scopedTheme || themeProp,\n          {\n      colorSchemes = {},\n      components = {},\n      generateCssVars = () => ({\n        vars: {},\n        css: {}\n      }),\n      cssVarPrefix\n    } = _ref,\n          restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      } // This scope occurs on the server\n\n\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n\n      return defaultMode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars(); // 3. Start composing the theme object\n\n    const theme = _extends({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(_ref3 => {\n      let [key, scheme] = _ref3;\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = deepmerge(theme.vars, rootVars); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      mode,\n      systemMode,\n      setMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme,\n      allColorSchemes\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n\n    if (nested) {\n      return element;\n    }\n\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\n    attribute: PropTypes.string,\n\n    /**\r\n     * The component tree.\r\n     */\n    children: PropTypes.node,\n\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\r\n     * The CSS selector for attaching the generated custom properties\r\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\r\n     * The initial color scheme used.\r\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\r\n     * The initial mode used.\r\n     */\n    defaultMode: PropTypes.string,\n\n    /**\r\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\r\n     */\n    disableNestedContext: PropTypes.bool,\n\n    /**\r\n     * If `true`, the style sheet won't be generated.\r\n     *\r\n     * This is useful for controlling nested CssVarsProvider behavior.\r\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes\r\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\r\n     * The document to attach the attribute to\r\n     */\n    documentNode: PropTypes.any,\n\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\r\n     * The window that attaches the 'storage' event listener\r\n     * @default window\r\n     */\n    storageWindow: PropTypes.any,\n\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","useTheme","muiUseTheme","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","disableNestedContext","disableStyleSheetGeneration","hasMounted","useRef","upperTheme","ctx","nested","scopedTheme","_ref","components","generateCssVars","vars","css","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","stateMode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","stateColorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","rootCss","rootVars","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","schemeKey","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","useMemo","shouldGenerateStyleSheet","element","Fragment","styles","Provider","propTypes","string","node","any","oneOfType","object","bool","getInitColorSchemeScript","params"],"sources":["C:/Users/Admin/Desktop/react_complete_information/react-redux/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\r\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { deepmerge } from '@mui/utils';\r\nimport { GlobalStyles } from '@mui/styled-engine';\r\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\r\nimport ThemeProvider from '../ThemeProvider';\r\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\r\nimport useCurrentColorScheme from './useCurrentColorScheme';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\r\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\r\nexport default function createCssVarsProvider(options) {\r\n  const {\r\n    themeId,\r\n    theme: defaultTheme = {},\r\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\r\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\r\n    defaultMode: designSystemMode = 'light',\r\n    defaultColorScheme: designSystemColorScheme,\r\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\r\n    resolveTheme,\r\n    excludeVariablesFromRoot\r\n  } = options;\r\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\r\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\r\n  }\r\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\r\n  const useColorScheme = () => {\r\n    const value = React.useContext(ColorSchemeContext);\r\n    if (!value) {\r\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\r\n    }\r\n    return value;\r\n  };\r\n  function CssVarsProvider({\r\n    children,\r\n    theme: themeProp = defaultTheme,\r\n    modeStorageKey = defaultModeStorageKey,\r\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\r\n    attribute = defaultAttribute,\r\n    defaultMode = designSystemMode,\r\n    defaultColorScheme = designSystemColorScheme,\r\n    disableTransitionOnChange = designSystemTransitionOnChange,\r\n    storageWindow = typeof window === 'undefined' ? undefined : window,\r\n    documentNode = typeof document === 'undefined' ? undefined : document,\r\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\r\n    colorSchemeSelector = ':root',\r\n    disableNestedContext = false,\r\n    disableStyleSheetGeneration = false\r\n  }) {\r\n    const hasMounted = React.useRef(false);\r\n    const upperTheme = muiUseTheme();\r\n    const ctx = React.useContext(ColorSchemeContext);\r\n    const nested = !!ctx && !disableNestedContext;\r\n    const scopedTheme = themeProp[themeId];\r\n    const _ref = scopedTheme || themeProp,\r\n      {\r\n        colorSchemes = {},\r\n        components = {},\r\n        generateCssVars = () => ({\r\n          vars: {},\r\n          css: {}\r\n        }),\r\n        cssVarPrefix\r\n      } = _ref,\r\n      restThemeProp = _objectWithoutPropertiesLoose(_ref, _excluded);\r\n    const allColorSchemes = Object.keys(colorSchemes);\r\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\r\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\r\n\r\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\r\n    const {\r\n      mode: stateMode,\r\n      setMode,\r\n      systemMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme: stateColorScheme,\r\n      setColorScheme\r\n    } = useCurrentColorScheme({\r\n      supportedColorSchemes: allColorSchemes,\r\n      defaultLightColorScheme,\r\n      defaultDarkColorScheme,\r\n      modeStorageKey,\r\n      colorSchemeStorageKey,\r\n      defaultMode,\r\n      storageWindow\r\n    });\r\n    let mode = stateMode;\r\n    let colorScheme = stateColorScheme;\r\n    if (nested) {\r\n      mode = ctx.mode;\r\n      colorScheme = ctx.colorScheme;\r\n    }\r\n    const calculatedMode = (() => {\r\n      if (mode) {\r\n        return mode;\r\n      }\r\n      // This scope occurs on the server\r\n      if (defaultMode === 'system') {\r\n        return designSystemMode;\r\n      }\r\n      return defaultMode;\r\n    })();\r\n    const calculatedColorScheme = (() => {\r\n      if (!colorScheme) {\r\n        // This scope occurs on the server\r\n        if (calculatedMode === 'dark') {\r\n          return defaultDarkColorScheme;\r\n        }\r\n        // use light color scheme, if default mode is 'light' | 'system'\r\n        return defaultLightColorScheme;\r\n      }\r\n      return colorScheme;\r\n    })();\r\n\r\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\r\n    const {\r\n      css: rootCss,\r\n      vars: rootVars\r\n    } = generateCssVars();\r\n\r\n    // 3. Start composing the theme object\r\n    const theme = _extends({}, restThemeProp, {\r\n      components,\r\n      colorSchemes,\r\n      cssVarPrefix,\r\n      vars: rootVars,\r\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\r\n    });\r\n\r\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\r\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\r\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\r\n    const defaultColorSchemeStyleSheet = {};\r\n    const otherColorSchemesStyleSheet = {};\r\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\r\n      const {\r\n        css,\r\n        vars\r\n      } = generateCssVars(key);\r\n      theme.vars = deepmerge(theme.vars, vars);\r\n      if (key === calculatedColorScheme) {\r\n        // 4.1 Merge the selected color scheme to the theme\r\n        Object.keys(scheme).forEach(schemeKey => {\r\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\r\n            // shallow merge the 1st level structure of the theme.\r\n            theme[schemeKey] = _extends({}, theme[schemeKey], scheme[schemeKey]);\r\n          } else {\r\n            theme[schemeKey] = scheme[schemeKey];\r\n          }\r\n        });\r\n        if (theme.palette) {\r\n          theme.palette.colorScheme = key;\r\n        }\r\n      }\r\n      const resolvedDefaultColorScheme = (() => {\r\n        if (typeof defaultColorScheme === 'string') {\r\n          return defaultColorScheme;\r\n        }\r\n        if (defaultMode === 'dark') {\r\n          return defaultColorScheme.dark;\r\n        }\r\n        return defaultColorScheme.light;\r\n      })();\r\n      if (key === resolvedDefaultColorScheme) {\r\n        if (excludeVariablesFromRoot) {\r\n          const excludedVariables = {};\r\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\r\n            excludedVariables[cssVar] = css[cssVar];\r\n            delete css[cssVar];\r\n          });\r\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\r\n        }\r\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\r\n      } else {\r\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\r\n      }\r\n    });\r\n    theme.vars = deepmerge(theme.vars, rootVars);\r\n\r\n    // 5. Declaring effects\r\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\r\n    React.useEffect(() => {\r\n      if (colorScheme && colorSchemeNode) {\r\n        // attaches attribute to <html> because the css variables are attached to :root (html)\r\n        colorSchemeNode.setAttribute(attribute, colorScheme);\r\n      }\r\n    }, [colorScheme, attribute, colorSchemeNode]);\r\n\r\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\r\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\r\n    React.useEffect(() => {\r\n      let timer;\r\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\r\n        const css = documentNode.createElement('style');\r\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\r\n        documentNode.head.appendChild(css);\r\n\r\n        // Force browser repaint\r\n        (() => window.getComputedStyle(documentNode.body))();\r\n        timer = setTimeout(() => {\r\n          documentNode.head.removeChild(css);\r\n        }, 1);\r\n      }\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\r\n    React.useEffect(() => {\r\n      hasMounted.current = true;\r\n      return () => {\r\n        hasMounted.current = false;\r\n      };\r\n    }, []);\r\n    const contextValue = React.useMemo(() => ({\r\n      mode,\r\n      systemMode,\r\n      setMode,\r\n      lightColorScheme,\r\n      darkColorScheme,\r\n      colorScheme,\r\n      setColorScheme,\r\n      allColorSchemes\r\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\r\n    let shouldGenerateStyleSheet = true;\r\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\r\n      shouldGenerateStyleSheet = false;\r\n    }\r\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\r\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/_jsxs(React.Fragment, {\r\n        children: [/*#__PURE__*/_jsx(GlobalStyles, {\r\n          styles: {\r\n            [colorSchemeSelector]: rootCss\r\n          }\r\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n          styles: defaultColorSchemeStyleSheet\r\n        }), /*#__PURE__*/_jsx(GlobalStyles, {\r\n          styles: otherColorSchemesStyleSheet\r\n        })]\r\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\r\n        themeId: scopedTheme ? themeId : undefined,\r\n        theme: resolveTheme ? resolveTheme(theme) : theme,\r\n        children: children\r\n      })]\r\n    });\r\n    if (nested) {\r\n      return element;\r\n    }\r\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\r\n      value: contextValue,\r\n      children: element\r\n    });\r\n  }\r\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\r\n    /**\r\n     * The body attribute name to attach colorScheme.\r\n     */\r\n    attribute: PropTypes.string,\r\n    /**\r\n     * The component tree.\r\n     */\r\n    children: PropTypes.node,\r\n    /**\r\n     * The node used to attach the color-scheme attribute\r\n     */\r\n    colorSchemeNode: PropTypes.any,\r\n    /**\r\n     * The CSS selector for attaching the generated custom properties\r\n     */\r\n    colorSchemeSelector: PropTypes.string,\r\n    /**\r\n     * localStorage key used to store `colorScheme`\r\n     */\r\n    colorSchemeStorageKey: PropTypes.string,\r\n    /**\r\n     * The initial color scheme used.\r\n     */\r\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    /**\r\n     * The initial mode used.\r\n     */\r\n    defaultMode: PropTypes.string,\r\n    /**\r\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\r\n     */\r\n    disableNestedContext: PropTypes.bool,\r\n    /**\r\n     * If `true`, the style sheet won't be generated.\r\n     *\r\n     * This is useful for controlling nested CssVarsProvider behavior.\r\n     */\r\n    disableStyleSheetGeneration: PropTypes.bool,\r\n    /**\r\n     * Disable CSS transitions when switching between modes or color schemes\r\n     */\r\n    disableTransitionOnChange: PropTypes.bool,\r\n    /**\r\n     * The document to attach the attribute to\r\n     */\r\n    documentNode: PropTypes.any,\r\n    /**\r\n     * The key in the local storage used to store current color scheme.\r\n     */\r\n    modeStorageKey: PropTypes.string,\r\n    /**\r\n     * The window that attaches the 'storage' event listener\r\n     * @default window\r\n     */\r\n    storageWindow: PropTypes.any,\r\n    /**\r\n     * The calculated theme object that will be passed through context.\r\n     */\r\n    theme: PropTypes.object\r\n  } : void 0;\r\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\r\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\r\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\r\n    attribute: defaultAttribute,\r\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\r\n    defaultMode: designSystemMode,\r\n    defaultLightColorScheme,\r\n    defaultDarkColorScheme,\r\n    modeStorageKey: defaultModeStorageKey\r\n  }, params));\r\n  return {\r\n    CssVarsProvider,\r\n    useColorScheme,\r\n    getInitColorSchemeScript\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}