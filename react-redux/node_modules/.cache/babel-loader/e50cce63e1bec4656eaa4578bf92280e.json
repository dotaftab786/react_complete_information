{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { Component, createRef, PureComponent } from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport { Calendar } from '@fullcalendar/core';\nimport { CustomRenderingStore } from '@fullcalendar/core/internal';\nconst reactMajorVersion = parseInt(String(React.version).split('.')[0]);\nconst syncRenderingByDefault = reactMajorVersion < 18;\nexport default class FullCalendar extends Component {\n  constructor() {\n    super(...arguments);\n    this.elRef = createRef();\n    this.isUpdating = false;\n    this.isUnmounting = false;\n    this.state = {\n      customRenderingMap: new Map()\n    };\n\n    this.requestResize = () => {\n      if (!this.isUnmounting) {\n        this.cancelResize();\n        this.resizeId = requestAnimationFrame(() => {\n          this.doResize();\n        });\n      }\n    };\n  }\n\n  render() {\n    const customRenderingNodes = [];\n\n    for (const customRendering of this.state.customRenderingMap.values()) {\n      customRenderingNodes.push(React.createElement(CustomRenderingComponent, {\n        key: customRendering.id,\n        customRendering: customRendering\n      }));\n    }\n\n    return React.createElement(\"div\", {\n      ref: this.elRef\n    }, customRenderingNodes);\n  }\n\n  componentDidMount() {\n    const customRenderingStore = new CustomRenderingStore();\n    this.handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore);\n    this.calendar = new Calendar(this.elRef.current, Object.assign(Object.assign({}, this.props), {\n      handleCustomRendering: this.handleCustomRendering\n    }));\n    this.calendar.render();\n    let lastRequestTimestamp;\n    customRenderingStore.subscribe(customRenderingMap => {\n      const requestTimestamp = Date.now();\n      const isMounting = !lastRequestTimestamp;\n      const runFunc = // don't call flushSync if React version already does sync rendering by default\n      // guards against fatal errors:\n      // https://github.com/fullcalendar/fullcalendar/issues/7448\n      syncRenderingByDefault || //\n      isMounting || this.isUpdating || this.isUnmounting || requestTimestamp - lastRequestTimestamp < 100 // rerendering frequently\n      ? runNow // either sync rendering (first-time or React 16/17) or async (React 18)\n      : flushSync; // guaranteed sync rendering\n\n      runFunc(() => {\n        this.setState({\n          customRenderingMap\n        }, () => {\n          lastRequestTimestamp = requestTimestamp;\n\n          if (isMounting) {\n            this.doResize();\n          } else {\n            this.requestResize();\n          }\n        });\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    this.isUpdating = true;\n    this.calendar.resetOptions(Object.assign(Object.assign({}, this.props), {\n      handleCustomRendering: this.handleCustomRendering\n    }));\n    this.isUpdating = false;\n  }\n\n  componentWillUnmount() {\n    this.isUnmounting = true;\n    this.cancelResize();\n    this.calendar.destroy();\n  }\n\n  doResize() {\n    this.calendar.updateSize();\n  }\n\n  cancelResize() {\n    if (this.resizeId !== undefined) {\n      cancelAnimationFrame(this.resizeId);\n      this.resizeId = undefined;\n    }\n  }\n\n  getApi() {\n    return this.calendar;\n  }\n\n}\nFullCalendar.act = runNow; // DEPRECATED. Not leveraged anymore\n\nclass CustomRenderingComponent extends PureComponent {\n  render() {\n    const {\n      customRendering\n    } = this.props;\n    const {\n      generatorMeta\n    } = customRendering;\n    const vnode = typeof generatorMeta === 'function' ? generatorMeta(customRendering.renderProps) : generatorMeta;\n    return createPortal(vnode, customRendering.containerEl);\n  }\n\n} // Util\n// -------------------------------------------------------------------------------------------------\n\n\nfunction runNow(f) {\n  f();\n}","map":{"version":3,"mappings":"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","names":["React","Component","createRef","PureComponent","createPortal","flushSync","Calendar","CustomRenderingStore","reactMajorVersion","parseInt","String","version","split","syncRenderingByDefault","FullCalendar","constructor","customRenderingMap","Map","isUnmounting","cancelResize","resizeId","requestAnimationFrame","doResize","render","customRenderingNodes","customRendering","state","values","push","CustomRenderingComponent","key","id","ref","elRef","componentDidMount","customRenderingStore","handleCustomRendering","handle","bind","calendar","current","Object","props","lastRequestTimestamp","subscribe","requestTimestamp","Date","now","isMounting","runFunc","isUpdating","runNow","setState","requestResize","componentDidUpdate","resetOptions","componentWillUnmount","destroy","updateSize","undefined","cancelAnimationFrame","getApi","generatorMeta","vnode","renderProps","containerEl","f"],"sources":["C:\\Users\\Admin\\Desktop\\react_complete_information\\react-redux\\node_modules\\@fullcalendar\\react\\src\\index.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { Component, createRef, PureComponent } from 'react'\nimport { createPortal, flushSync } from 'react-dom'\nimport {\n  CalendarOptions,\n  CalendarApi,\n  Calendar,\n} from '@fullcalendar/core'\nimport {\n  CustomRendering,\n  CustomRenderingStore,\n} from '@fullcalendar/core/internal'\n\nconst reactMajorVersion = parseInt(String(React.version).split('.')[0])\nconst syncRenderingByDefault = reactMajorVersion < 18\n\ninterface CalendarState {\n  customRenderingMap: Map<string, CustomRendering<any>>\n}\n\nexport default class FullCalendar extends Component<CalendarOptions, CalendarState> {\n  static act = runNow // DEPRECATED. Not leveraged anymore\n\n  private elRef = createRef<HTMLDivElement>()\n  private calendar: Calendar\n  private handleCustomRendering: (customRendering: CustomRendering<any>) => void\n  private resizeId: number | undefined\n  private isUpdating = false\n  private isUnmounting = false\n\n  state: CalendarState = {\n    customRenderingMap: new Map<string, CustomRendering<any>>()\n  }\n\n  render() {\n    const customRenderingNodes: JSX.Element[] = []\n\n    for (const customRendering of this.state.customRenderingMap.values()) {\n      customRenderingNodes.push(\n        <CustomRenderingComponent\n          key={customRendering.id}\n          customRendering={customRendering}\n        />\n      )\n    }\n\n    return (\n      <div ref={this.elRef}>\n        {customRenderingNodes}\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    const customRenderingStore = new CustomRenderingStore<unknown>()\n    this.handleCustomRendering = customRenderingStore.handle.bind(customRenderingStore)\n\n    this.calendar = new Calendar(this.elRef.current, {\n      ...this.props,\n      handleCustomRendering: this.handleCustomRendering,\n    })\n    this.calendar.render()\n\n    let lastRequestTimestamp: number | undefined\n\n    customRenderingStore.subscribe((customRenderingMap) => {\n      const requestTimestamp = Date.now()\n      const isMounting = !lastRequestTimestamp\n      const runFunc = (\n        // don't call flushSync if React version already does sync rendering by default\n        // guards against fatal errors:\n        // https://github.com/fullcalendar/fullcalendar/issues/7448\n        syncRenderingByDefault ||\n        //\n        isMounting ||\n        this.isUpdating ||\n        this.isUnmounting ||\n        (requestTimestamp - lastRequestTimestamp) < 100 // rerendering frequently\n      ) ? runNow // either sync rendering (first-time or React 16/17) or async (React 18)\n        : flushSync // guaranteed sync rendering\n\n      runFunc(() => {\n        this.setState({ customRenderingMap }, () => {\n          lastRequestTimestamp = requestTimestamp\n          if (isMounting) {\n            this.doResize()\n          } else {\n            this.requestResize()\n          }\n        })\n      })\n    })\n  }\n\n  componentDidUpdate() {\n    this.isUpdating = true\n    this.calendar.resetOptions({\n      ...this.props,\n      handleCustomRendering: this.handleCustomRendering,\n    })\n    this.isUpdating = false\n  }\n\n  componentWillUnmount() {\n    this.isUnmounting = true\n    this.cancelResize()\n    this.calendar.destroy()\n  }\n\n  requestResize = () => {\n    if (!this.isUnmounting) {\n      this.cancelResize()\n      this.resizeId = requestAnimationFrame(() => {\n        this.doResize()\n      })\n    }\n  }\n\n  doResize() {\n    this.calendar.updateSize()\n  }\n\n  cancelResize() {\n    if (this.resizeId !== undefined) {\n      cancelAnimationFrame(this.resizeId)\n      this.resizeId = undefined\n    }\n  }\n\n  getApi(): CalendarApi {\n    return this.calendar\n  }\n}\n\n// Custom Rendering\n// -------------------------------------------------------------------------------------------------\n\ninterface CustomRenderingComponentProps {\n  customRendering: CustomRendering<any>\n}\n\nclass CustomRenderingComponent extends PureComponent<CustomRenderingComponentProps> {\n  render() {\n    const { customRendering } = this.props\n    const { generatorMeta } = customRendering\n    const vnode = typeof generatorMeta === 'function' ?\n      generatorMeta(customRendering.renderProps) :\n      generatorMeta\n\n    return createPortal(vnode, customRendering.containerEl)\n  }\n}\n\n// Util\n// -------------------------------------------------------------------------------------------------\n\nfunction runNow(f: () => void): void {\n  f()\n}\n"]},"metadata":{},"sourceType":"module"}